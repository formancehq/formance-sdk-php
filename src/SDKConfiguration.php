<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace formance\stack;

class SDKConfiguration
{
    public ?\GuzzleHttp\ClientInterface $defaultClient = null;

    public ?\GuzzleHttp\ClientInterface $securityClient = null;

    public ?Models\Shared\Security $security = null;

    /** @var pure-Closure(): Models\Shared\Security */
    public ?\Closure $securitySource = null;

    public string $serverUrl = '';

    public int $serverIndex = 0;

    /** @var array<array<string, string>> */
    public ?array $serverDefaults = [
        [
        ],
        [
            'environment' => 'sandbox',
            'organization' => 'orgID-stackID',
        ],
    ];

    public string $language = 'php';

    public string $openapiDocVersion = 'v2.1.1';

    public string $sdkVersion = '3.2.0';

    public string $genVersion = '2.467.4';

    public string $userAgent = 'speakeasy-sdk/php 3.2.0 2.467.4 v2.1.1 formance/formance-sdk';

    public function getServerUrl(): string
    {

        if ($this->serverUrl !== '') {
            return $this->serverUrl;
        }

        if (isset(SDK::SERVERS[$this->serverIndex])) {
            return SDK::SERVERS[$this->serverIndex];
        } else {
            throw new \OutOfBoundsException('Server index '.$this->serverIndex.' is out of bounds');
        }
    }

    /**
     * @return array<string, string>
     */
    public function getServerDefaults(): ?array
    {
        return $this->serverDefaults[$this->serverIndex];
    }
    public function hasSecurity(): bool
    {
        return $this->security !== null || $this->securitySource !== null;
    }

    public function getSecurity(): ?Models\Shared\Security
    {
        if ($this->securitySource !== null) {
            $security = $this->securitySource->call($this);

            return $security;
        } else {
            return $this->security;
        }
    }

    /**
     * @return Utils\ServerDetails
     */
    public function getServerDetails(): Utils\ServerDetails
    {
        if ($this->serverUrl !== null && $this->serverUrl !== '') {
            return new Utils\ServerDetails(rtrim($this->serverUrl, '/'), []);
        }
        if ($this->serverIndex === null) {
            $this->serverIndex = 0;
        }

        return new Utils\ServerDetails(SDK::SERVERS[$this->serverIndex], $this->serverDefaults[$this->serverIndex]);

    }

}