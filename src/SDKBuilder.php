<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace formance\stack;

use formance\stack\Utils\Retry;

/**
 * SDKBuilder is used to configure and build an instance of the SDK.
 */
class SDKBuilder
{
    public function __construct(
        private SDKConfiguration $sdkConfig = new SDKConfiguration(),
    ) {
    }

    /**
     * setClient allows setting a custom Guzzle client for the SDK to make requests with.
     *
     * @param  \GuzzleHttp\ClientInterface  $client
     * @return SDKBuilder
     */
    public function setClient(\GuzzleHttp\ClientInterface $client): SDKBuilder
    {
        $this->sdkConfig->client = $client;

        return $this;
    }

    /**
     * setSecurity is used to configure the security required for the SDK.
     *
     * @param  Models\Shared\Security  $security
     * @return SDKBuilder
     */
    public function setSecurity(Models\Shared\Security $security): SDKBuilder
    {
        $this->sdkConfig->securitySource = fn () => $security;

        return $this;
    }

    /**
     * setSecuritySource is usd to configure the security required for the SDK.
     * unlike setSecurity, setSecuritySource accepts a closure that will be called to retrieve the security information.
     *
     * @param  pure-Closure(): Models\Shared\Security  $securitySource
     * @return SDKBuilder
     */
    public function setSecuritySource(\Closure $securitySource): SDKBuilder
    {
        $this->sdkConfig->securitySource = $securitySource;

        return $this;
    }

    /**
     * setServerUrl is used to configure the server URL for the SDK, and optionally template any parameters in the URL.
     *
     * @param  string  $serverUrl
     * @param  array<string, string>  $params
     * @return SDKBuilder
     */
    public function setServerUrl(string $serverUrl, ?array $params = null): SDKBuilder
    {
        $this->sdkConfig->serverUrl = Utils\Utils::templateUrl($serverUrl, $params);

        return $this;
    }

    /**
     * setServer is used to configure the server for the SDK
     *
     * @param  int  $serverIdx
     * @return SDKBuilder
     */
    public function setServerIndex(int $serverIdx): SDKBuilder
    {
        $this->sdkConfig->serverIndex = $serverIdx;

        return $this;
    }

    /**
     * setEnvironment is used to configure the environment variable for url substitution
     *
     * @param  ServerEnvironment  $environment
     * @return SDKBuilder
     */
    public function setEnvironment(ServerEnvironment $environment): SDKBuilder
    {
        foreach ($this->sdkConfig->serverDefaults as $idx => $serverDefaults) {
            if (! array_key_exists('environment', $serverDefaults)) {
                continue;
            }
            $this->sdkConfig->serverDefaults[$idx]['environment'] = $environment->value;
        }

        return $this;
    }

    /**
     * setOrganization is used to configure the organization variable for url substitution
     *
     * @param  string  $organization
     * @return SDKBuilder
     */
    public function setOrganization(string $organization): SDKBuilder
    {
        foreach ($this->sdkConfig->serverDefaults as $idx => $serverDefaults) {
            if (! array_key_exists('organization', $serverDefaults)) {
                continue;
            }
            $this->sdkConfig->serverDefaults[$idx]['organization'] = $organization;
        }

        return $this;
    }

    public function setRetryConfig(Retry\RetryConfig $config): SDKBuilder
    {
        $this->sdkConfig->retryConfig = $config;

        return $this;
    }

    /**
     * build is used to build the SDK with any of the configured options.
     *
     * @return SDK
     */
    public function build(): SDK
    {
        if ($this->sdkConfig->client === null) {
            $this->sdkConfig->client = new \GuzzleHttp\Client([
                'timeout' => 60,
            ]);
        }
        if ($this->sdkConfig->hasSecurity()) {
            $this->sdkConfig->client = Utils\Utils::configureSecurityClient($this->sdkConfig->client, $this->sdkConfig->getSecurity());
        }

        return new SDK($this->sdkConfig);
    }
}